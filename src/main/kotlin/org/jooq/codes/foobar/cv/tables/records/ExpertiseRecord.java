/*
 * This file is generated by jOOQ.
*/
package org.jooq.codes.foobar.cv.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.codes.foobar.cv.tables.Expertise;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExpertiseRecord extends UpdatableRecordImpl<ExpertiseRecord> implements Record4<Integer, Integer, String, String> {

    private static final long serialVersionUID = -1960858224;

    /**
     * Setter for <code>public.EXPERTISE.ID</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.EXPERTISE.ID</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.EXPERTISE.PERSON_ID</code>.
     */
    public void setPersonId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.EXPERTISE.PERSON_ID</code>.
     */
    public Integer getPersonId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.EXPERTISE.LABEL</code>.
     */
    public void setLabel(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.EXPERTISE.LABEL</code>.
     */
    public String getLabel() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.EXPERTISE.CONTENT</code>.
     */
    public void setContent(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.EXPERTISE.CONTENT</code>.
     */
    public String getContent() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Expertise.EXPERTISE.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return Expertise.EXPERTISE.PERSON_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Expertise.EXPERTISE.LABEL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Expertise.EXPERTISE.CONTENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getPersonId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getLabel();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getContent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getPersonId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getLabel();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getContent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExpertiseRecord value1(Integer value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExpertiseRecord value2(Integer value) {
        setPersonId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExpertiseRecord value3(String value) {
        setLabel(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExpertiseRecord value4(String value) {
        setContent(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExpertiseRecord values(Integer value1, Integer value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExpertiseRecord
     */
    public ExpertiseRecord() {
        super(Expertise.EXPERTISE);
    }

    /**
     * Create a detached, initialised ExpertiseRecord
     */
    public ExpertiseRecord(Integer id, Integer personId, String label, String content) {
        super(Expertise.EXPERTISE);

        set(0, id);
        set(1, personId);
        set(2, label);
        set(3, content);
    }
}
